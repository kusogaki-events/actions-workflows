name: release
on:
  workflow_call:
    inputs:
      fetch-depth:
        description: Depth of commits to fetch on Git checkout
        type: string
        default: 0 # all history
      changelog-file:
        description: Path to the changelog file
        type: string
        default: 'CHANGELOG.md'
      version-increment:
        description: Version increment type (major, minor, patch)
        type: string
        default: 'patch'
      initial-version:
        description: Initial version to use if no releases exist
        type: string
        default: '0.1.0'
permissions:
  contents: write
  pull-requests: write
  workflows: write
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      ########################################
      # Clone project
      ########################################
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ inputs.fetch-depth }}
          
      ########################################
      # Configure Git
      ########################################
      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      ########################################
      # Create release branch
      ########################################
      - name: Create Release Branch
        id: create-branch
        run: |
          BRANCH_NAME="release/changelog-$(date +%Y%m%d-%H%M%S)"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          git checkout -b "$BRANCH_NAME"

      ########################################
      # Get latest version and generate new one
      ########################################
      - name: Get Version Info
        id: version
        run: |
          if git describe --tags --abbrev=0 2>/dev/null; then
            CURRENT_VERSION=$(git describe --tags --abbrev=0)
            CURRENT_VERSION=${CURRENT_VERSION#v}  # Remove 'v' prefix if present
            
            IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
            
            case "${{ inputs.version-increment }}" in
              "major")
                NEW_VERSION="$((major + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="${major}.$((minor + 1)).0"
                ;;
              *)  # patch by default
                NEW_VERSION="${major}.${minor}.$((patch + 1))"
                ;;
            esac
          else
            CURRENT_VERSION="0.0.0"
            NEW_VERSION="${{ inputs.initial-version }}"
            echo "Creating initial release version $NEW_VERSION"
          fi
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      ########################################
      # Generate changelog entries
      ########################################
      - name: Generate Changelog Entries
        id: changelog
        run: |
          RELEASE_DATE=$(date +%Y-%m-%d)
          
          if [ "${{ steps.version.outputs.current_version }}" = "0.0.0" ]; then
            echo "Getting all commits for initial release..."
            COMMITS=$(git log --pretty=format:"- %s")
          else
            echo "Getting commits since last tag..."
            COMMITS=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD)
          fi
          
          NEW_ENTRY="## ${{ steps.version.outputs.new_version }} ($RELEASE_DATE)\n\n${COMMITS}\n\n"
          
          if [ -f "${{ inputs.changelog-file }}" ]; then
            EXISTING_CONTENT=$(cat "${{ inputs.changelog-file }}")
            echo -e "$NEW_ENTRY$EXISTING_CONTENT" > "${{ inputs.changelog-file }}"
          else
            echo -e "$NEW_ENTRY" > "${{ inputs.changelog-file }}"
          fi
          
          echo "version=${{ steps.version.outputs.new_version }}" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      ########################################
      # Commit and push changes
      ########################################
      - name: Commit and Push Changes
        run: |
          git add "${{ inputs.changelog-file }}"
          git commit -m "Update changelog for version ${{ steps.version.outputs.new_version }}"
          git push origin "${{ steps.create-branch.outputs.branch_name }}"

      ########################################
      # Create Pull Request
      ########################################
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release version ${{ steps.version.outputs.new_version }}`,
              body: `Changelog update for version ${{ steps.version.outputs.new_version }}

              Changes included in this release:
              ${{ steps.changelog.outputs.description }}`,
              head: '${{ steps.create-branch.outputs.branch_name }}',
              base: '${{ github.event.repository.default_branch }}'
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              labels: ['automated-pr', 'release']
            });

      ########################################
      # Create tag and release
      ########################################
      - name: Create Tag and Release
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/v${{ steps.version.outputs.new_version }}`,
              sha: context.sha
            });
            
            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ steps.version.outputs.new_version }}`,
              name: `v${{ steps.version.outputs.new_version }}`,
              body: `${{ steps.changelog.outputs.description }}`,
              target_commitish: context.sha
            });